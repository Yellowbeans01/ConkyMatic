--[[
#=====================================================================================
#  Package:     CONKY USR/BIN/FOOBAR
#  Version:     1.0
#  Author:      USR/BIN/FOOBAR
#  Date:        01/27/2018
#  License:     Distributed under the terms of GNU GPL version 2 or later
#  Font Used:   Roboto
#======================================================================================
]]

conky.config = {

	font = 'Roboto:size=11:bold',  	            -- font for complete conky unless in code defined

	background = true, 							-- forked to background
	cpu_avg_samples = 2,						-- The number of samples to average for CPU monitoring.
	diskio_avg_samples = 10,					-- The number of samples to average for disk I/O monitoring.
	double_buffer = true,						-- Use the Xdbe extension? (eliminates flicker)
	if_up_strictness = 'address',				-- how strict if testing interface is up - up, link or address
	net_avg_samples = 2,						-- The number of samples to average for net data
	no_buffers = true,							-- Subtract (file system) buffers from used memory?
	temperature_unit = 'celsius',				-- fahrenheit or celsius
	text_buffer_size = 2048,					-- size of buffer for display of content of large variables - default 256
	update_interval = 1,						-- update interval
	imlib_cache_size = 0,                       -- disable image cache to get a new Spotify cover per song

	--Placement

	alignment = 'middle_right',		            -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,middle_left,middle_middle,middle_right,none
	gap_x = 40,									-- pixels between right or left border
	gap_y = 20,									-- pixels between bottom or left border
	minimum_height = 600,						-- minimum height of window
	minimum_width = 236,						-- minimum height of window
	maximum_width = 236,						-- maximum height of window

	--Graphical

	border_inner_margin = 10, 					-- margin between border and text
	border_outer_margin = 1, 					-- margin between border and edge of window
	border_width = 1, 							-- border width in pixels
	default_bar_width = 250,					-- default is 0 - full width
	default_bar_height = 10,					-- default is 6
	default_gauge_height = 25,					-- default is 25
	default_gauge_width = 40,					-- default is 40
	default_graph_height = 40,					-- default is 25
	default_graph_width = 153,					-- default is 0 - full width
	default_shade_color = '#000000',			-- default shading colour
	default_outline_color = '#999999',			-- default outline colour
	draw_borders = false,						-- draw borders around text
	draw_graph_borders = true,					-- draw borders around graphs    
	draw_shades = false,						-- draw shades
	draw_outline = false,						-- draw outline
	stippled_borders = 0,						-- dashing the border

	--Textual

	extra_newline = false,						-- extra newline at the end
	format_human_readable = true,				-- KiB, MiB rather then number of bytes
	max_text_width = 0,							-- 0 will make sure line does not get broken if width too smal
	max_user_text = 16384,						-- max text in conky default 16384
	override_utf8_locale = true,				-- force UTF8 requires xft
	short_units = true,							-- shorten units from KiB to k
	top_name_width = 21,						-- width for $top name value default 15
	top_name_verbose = false,					-- If true, top name shows the full command line of  each  process - Default value is false.
	uppercase = false,							-- uppercase or not
	use_spacer = 'none',						-- adds spaces around certain objects to align - default none
	use_xft = true,								-- xft font - anti-aliased font
	xftalpha = 1,								-- alpha of the xft font - between 0-1

	--Windows

	own_window = true,							-- create your own window to draw
	own_window_argb_value = 255,			    -- real transparency - composite manager required 0-255
	own_window_argb_visual = true,				-- use ARGB - composite manager required
	own_window_class = 'Conky',					-- manually set the WM_CLASS name for use with xprop
	own_window_colour = '#000000',				-- set colour if own_window_transparent no
	own_window_hints = 'undecorated,below,above,sticky,skip_taskbar,skip_pager',  -- if own_window true - just hints - own_window_type sets it
	own_window_transparent = false,				-- if own_window_argb_visual is true sets background opacity 0%
	own_window_title = 'system_conky',			-- set the name manually  - default conky "hostname"
	own_window_type = 'desktop',				-- if own_window true options are: normal/override/dock/desktop/panel

    -- Weather

    template0="~/.conky-weather-icons/openweathermap/64px-orange",  -- Path to weather icons
    template1="weather-owm.json",                                   -- Weather cache filename
    template2="forecast-owm.json",                                  -- Forecast cache filename
    template6="0080f5afab42e15e709e0395c8547204",                   -- Weather API Key. To get API Key sign up at https://openweathermap.org/appid
    template7="5830062",                                            -- Weather City ID. Find your City ID at http://openweathermap.org/help/city_list.txt
    template8="imperial",                                           -- Weather Temp Unit (default, metric, imperial)
    template9="en_US.UTF-8",                                        -- Weather Locale (e.g. "es_ES.UTF-8"

	--Colors

	default_color = '#86D45A',  -- default color and border color
	color1 = '#f0f0f0',         --white
	color2 = '#86D45A',         --green
	color3 = '#ff9d0a',         --orange
	color4 = '#fc1b0f',         --red
	color5 = '#86D45A',         --green for battery bar
	color6 = '#fc1b0f',         --red for low battery bar

};

conky.text = [[
#
# Fetch the data from openweathermap.org every 5 minutes and cache the json file it provides
${execi 300 l=${template9}; l=${l%%_*}; curl -s "api.openweathermap.org/data/2.5/weather?APPID=${template6}&id=${template7}&units=${template8}&lang=$l" -o ~/.cache/${template1}}\
${execi 300 l=${template9}; l=${l%%_*}; curl -s "api.openweathermap.org/data/2.5/forecast?APPID=${template6}&id=${template7}&cnt=40&units=${template8}&lang=$l" -o ~/.cache/${template2}}\
#
# Fetch and cache the weather icon
${execi 300 cp -f ${template0}/$(jq .weather[0].id ~/.cache/${template1}).png ~/.cache/weather.png}\
#
# Fetch and cache forcast icons
${execi 300 cp -f ${template0}/$(jq  .list[7].weather[0].id ~/.cache/${template2}).png ~/.cache/forecast1.png}\
${execi 300 cp -f ${template0}/$(jq .list[15].weather[0].id ~/.cache/${template2}).png ~/.cache/forecast2.png}\
${execi 300 cp -f ${template0}/$(jq .list[23].weather[0].id ~/.cache/${template2}).png ~/.cache/forecast3.png}\
${execi 300 cp -f ${template0}/$(jq .list[31].weather[0].id ~/.cache/${template2}).png ~/.cache/forecast4.png}\
${execi 300 cp -f ${template0}/$(jq .list[39].weather[0].id ~/.cache/${template2}).png ~/.cache/forecast5.png}\
#
# -----------------------------------------------------------------------------------------
# 
# Time and date
${font Roboto:size=28}${color1}${alignc}\
${time %I:%M %p}\
${font}${color}
${voffset 2}${color3}${font Roboto:size=16}${alignc}\
${time %B %d, %Y}\
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Sunrise and sunset
${font Roboto:size=12:weight:bold}${color1}\
${voffset 4}${alignc}SUNRISE       SUNSET
${color}\
${color2}\
${voffset 4}${alignc} \
${execi 300 jq -r ".sys.sunrise" ~/.cache/${template1} | gawk '{print strftime("%I:%M %p", $0)}'}      \
${execi 300 jq -r ".sys.sunset"  ~/.cache/${template1} | gawk '{print strftime("%I:%M %p", $0)}'}\
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Current temperature
${font Roboto:size=28}${color1}\
${voffset 2}${offset 47}\
${execi 300 jq ".main.temp" ~/.cache/${template1} | awk '{print int($1+0.5)}' # round num}°\
${font}${color}
#
# Display the weather icon from the cache file
${image ~/.cache/weather.png -p 134,174 -s 68x68}
#
# High and low temps. Data gets pulled from the json file. We use awk to round the number
${font Roboto:size=11:weight:bold}${color1}\
${voffset -20}${offset 37}\
${execi 300 jq -r ".main.temp_min" ~/.cache/${template1} | awk '{print int($1+0.5)}' # round num}°  |  \
${execi 300 jq -r ".main.temp_max" ~/.cache/${template1} | awk '{print int($1+0.5)}' # round num}°\
${font}${color}
#
# Weather description. Data gets pulled from json file. We use awk to capitalize each word.
${font Roboto:size=15}${alignc}${color2}\
${voffset 5}\
${execi 300 jq -r ".weather[0].description" ~/.cache/${template1} | sed -e "s/\b\(.\)/\u\1/g"}\
${font}${color}
#
#
# City, longitude and latitude
${font Roboto:size=11:weight:bold}${alignc}${color1}\
${voffset 5}\
${execi 300 jq -r ".name" ~/.cache/${template1}}  \
${execi 300 jq -r ".coord.lat" ~/.cache/${template1}} N  \
${execi 300 jq -r ".coord.lon" ~/.cache/${template1}} W    \
${font}${color}
${color1}${hr 2}
#
#
#
# Display the weather forecast icons
${image ~/.cache/forecast1.png -p 5,320 -s 40x40}\
${image ~/.cache/forecast2.png -p 50,320 -s 40x40}\
${image ~/.cache/forecast3.png -p 95,320 -s 40x40}\
${image ~/.cache/forecast4.png -p 140,320 -s 40x40}\
${image ~/.cache/forecast5.png -p 185,320 -s 40x40}\
#
#
# 5 day forecast temps. Data gets pulled from the forecast json file. We use awk to round the number
${font Roboto:size=11:weight:bold}${color1}\
${voffset 40}\
${goto 27}${execi 300 jq -r   ".list[7].main.temp" ~/.cache/${template2} | awk '{print int($1+0.5)}' # round num}°\
${goto 74}${execi 300 jq -r  ".list[15].main.temp" ~/.cache/${template2} | awk '{print int($1+0.5)}' # round num}°\
${goto 117}${execi 300 jq -r ".list[23].main.temp" ~/.cache/${template2} | awk '{print int($1+0.5)}' # round num}°\
${goto 162}${execi 300 jq -r ".list[31].main.temp" ~/.cache/${template2} | awk '{print int($1+0.5)}' # round num}°\
${goto 205}${execi 300 jq -r ".list[39].main.temp" ~/.cache/${template2} | awk '{print int($1+0.5)}' # round num}°\
${font}${color}
#| gawk '{print strftime("%a", $0)}'
#
${font Roboto:size=11:weight:bold}${color1}\
${voffset 0}\
${goto 25}${execi 300 jq -r  ".list[7].dt" ~/.cache/${template2}  | gawk '{print strftime("%a", $0)}'}\
${goto 68}${execi 300 jq -r ".list[15].dt" ~/.cache/${template2}  | gawk '{print strftime("%a", $0)}'}\
${goto 114}${execi 300 jq -r ".list[23].dt" ~/.cache/${template2} | gawk '{print strftime("%a", $0)}'}\
${goto 165}${execi 300 jq -r ".list[31].dt" ~/.cache/${template2} | gawk '{print strftime("%a", $0)}'}\
${goto 206}${execi 300 jq -r ".list[39].dt" ~/.cache/${template2} | gawk '{print strftime("%a", $0)}'}\
${font}${color}
#
# -----------------------------------------------------------------------------------------
#
# Battery status bar.
# Note: If the battery level drops below 20% it changes to red
${color1}${hr 2}
${font Roboto:size=11:weight:bold}\
${if_match ${battery_percent} < 20}\
${color6}${battery_bar 10,134 BAT0}    ${color1}BAT  ${alignr}${color6}${battery_percent}%\
${else}${color5}${battery_bar 10,134 BAT0}   ${color1}BAT  ${alignr}${color2}${battery_percent}%\
${endif}\
${font}
#
# CPU bar.
# Note: If greater than 80% of the CPU is being used it turns red
${font Roboto:size=11:weight:bold}\
${color1}${cpubar cpu0 10,134}   ${color1}CPU  ${alignr}\
${if_match ${cpu cpu0} > 80}${color6}\
${else}${if_match ${cpu cpu0} > 50}${color3}\
${else}${color2}${endif}\
${endif}${cpu cpu0}% \
${font}
#
# RAM bar
${font Roboto:size=11:weight:bold}\
${color1}${membar 10,134}   RAM  ${alignr}\
${if_match ${memperc} > 80}${color6}\
${else}${color2}\
${endif}\
${color2}${memperc}% \
${font}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Used and free space on root and home
${font Roboto:size=11:weight:bold}\
${color3}Root ${offset 22}${color1}${fs_used /} Used ${alignr}${color2}${fs_free /} Free 
${color3}Home ${offset 15}${color1}${fs_used /home} Used ${alignr}${color2}${fs_free /home} Free \
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Uptime, CPU temp, CPU frequency, fan speed
${font Roboto:size=11:weight:bold}\
${color3}Uptime ${alignr}${color2} $uptime_short 
${color1}${hr 2}
${color3}CPU Temp ${alignr}${color2}${execi 10 sensors | grep 'Core 0' | awk {'print $3'}} 
${color3}Fan Speed ${alignr}${color2}${freq_g} RPM \
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# CPU usage. Top 6 processes
${font Roboto:size=11:weight:bold}${color3}CPU${alignr}${color2}Intel i7 
${color1}${top name 1}${alignr}${color2}${top cpu 1}% 
${color1}${top name 2}${alignr}${color2}${top cpu 2}% 
${color1}${top name 3}${alignr}${color2}${top cpu 3}% 
${color1}${top name 4}${alignr}${color2}${top cpu 4}% 
${color1}${top name 5}${alignr}${color2}${top cpu 5}% 
${color1}${top name 6}${alignr}${color2}${top cpu 6}% 
${color3}Total Processes${alignr}${color2}${processes} \
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Memory usage. Top 6 applications
${font Roboto:size=11:weight:bold}${color3}Memory${alignr}${color2}${memmax}  
${color1}${top_mem name 1}${alignr}${alignr}${color2}${top_mem mem 1}% 
${color1}${top_mem name 2}${alignr}${alignr}${color2}${top_mem mem 2}% 
${color1}${top_mem name 3}${alignr}${alignr}${color2}${top_mem mem 3}% 
${color1}${top_mem name 4}${alignr}${alignr}${color2}${top_mem mem 4}% 
${color1}${top_mem name 5}${alignr}${alignr}${color2}${top_mem mem 5}% 
${color1}${top_mem name 6}${alignr}${alignr}${color2}${top_mem mem 6}% 
${color3}Total Used${alignr}${color2}${mem}  \
${font}${color}
${color1}${hr 2}
#
# -----------------------------------------------------------------------------------------
#
# Package updates
${font Roboto:size=11:weight:bold}\
${color3}Package Updates${alignr}${color2}${execi 1800 checkupdates | wc -l} \
${font}${color}
]]
